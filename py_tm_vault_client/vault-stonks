#!/usr/bin/python3
import argparse
import logging
import os
import time
import webbrowser

DOCS_HOMEPAGE_HTML_PATH = 'docs/_build/html/index.html'

log = logging.getLogger(__name__)


def init_logging():
    logging.basicConfig(
        level=logging.DEBUG,
        format='[%(asctime)s %(name)s %(levelname)s] %(message)s',
        datefmt='%m-%d %H:%M',
    )


def init_parser():
    parser = argparse.ArgumentParser('Vault Stonks CLI')
    parser.add_argument(
        '--config_path',
        type=str,
        dest='config_path',
        default=os.path.join(
            os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
            'data/vault-config.json'
        ),
        help='path of your config, defaults to data/vault-config.json',
    )
    parser.add_argument(
        '--connect',
        nargs='?',
        type=str,
        dest='ssh_key_path',
        const=os.path.join(
            os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
            'data/ichack_key'
        ),
        help='connects to the Vault instance over SSH. '
        'Leave this running in the background.',
    )
    parser.add_argument(
        '--docs',
        dest='docs',
        action='store_true',
        help='launches the Vault SDK Docs Website',
    )
    parser.add_argument(
        '--create_customers',
        dest='create_customers',
        action='store_true',
        help='creates the given number of customers, '
             'each with one account of the default contract.',
    )
    parser.add_argument(
        '--num_customers',
        type=int,
        dest='num_customers',
        default=100,
        help='number of customers to create, defaults to 100',
    )
    parser.add_argument(
        '--product_id',
        type=str,
        dest='product_id',
        default='current_account',
        help='product id to use',
    )
    parser.add_argument(
        '--customers_file_path',
        type=str,
        dest='customers_file_path',
        default=os.path.join(
            os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
            'data/customers.json'
        ),
        help='path of your customers json, defaults to data/customers.json',
    )
    parser.add_argument(
        '--payment_bot',
        dest='payment_bot',
        action='store_true',
        help='runs a payment bot that submits payments between '
             'random accounts in data/customers.json. '
             'Please run --create_customers before this.',
    )
    return parser


if __name__ == '__main__':
    init_logging()

    arg_parser = init_parser()
    args = arg_parser.parse_args()

    if args.ssh_key_path:
        log.info(
            f'Connecting to Vault over SSH using identity file: '
            f'{args.ssh_key_path}'
        )

        from tmvault.config import VaultConfig

        config = VaultConfig.from_json_file_path(args.config_path)

        os.system(
            f'sshuttle -r {config.user}@{config.vault_cidr} '
            f'--ssh-cmd "ssh -i {args.ssh_key_path}" '
            f'--python "python3"'
        )
        exit(0)

    if args.docs:
        log.info('Opening docs site')
        parent_dir = os.path.dirname(os.path.abspath(__file__))
        webbrowser.open(os.path.join(parent_dir, DOCS_HOMEPAGE_HTML_PATH))
        time.sleep(1)  # Ensures webbrowser prints any logs before exiting
        exit(0)

    if args.create_customers:
        log.info(
            f'Creating {args.num_customers} customers with product '
            f'{args.product_id} and writing the results to '
            f'{args.customers_file_path}'
        )

        from tmvault import TMVaultClient
        from tmvault.scripts.customers_bot import (
            customers_bot
        )

        client = TMVaultClient(config_path=args.config_path)
        customers_bot(
            client,
            args.num_customers,
            product_id=args.product_id,
            add_payment_device=True,
            output_file_name=args.customers_file_path,
        )
        exit(0)

    if args.payment_bot:
        log.info('Starting Payment Bot...')

        from tmvault import TMVaultClient
        from tmvault.scripts.payments_bot import payments_bot

        client = TMVaultClient(config_path=args.config_path)
        payments_bot(client, args.customers_file_path)
        exit(0)

    arg_parser.print_help()
